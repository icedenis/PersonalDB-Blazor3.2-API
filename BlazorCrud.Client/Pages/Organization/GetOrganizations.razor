@page "/organization/list/{Page}"
@inject HttpClient Http
@inject LocalStorage Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster

@if (Storage.GetItem("Transaction") == "modified")
{
    Toaster.Success("Organization successfully updated in the system.", "Organization Updated");
    Storage.RemoveItem("Transaction");
}

<h1>Organization Data</h1>

<div class="row mb-3">
    <div class="col-md-7">
        @if (isLoggedOn())
        {
            <BSButton Class="btn btn-primary" @onclick="AddOrganization">Add New Organization</BSButton>
        }
    </div>
    <div class="input-group col-md-5 text-md-right">
        <input name="OrganizationSearchInput" type="text" class="form-control" placeholder="Organization Name" @bind="this.SearchTerm" @onkeyup="SearchBoxKeyPress" />
        <div class="input-group-btn">
            <button name="OrganizationSearchButton" class="btn btn-default" @onclick="SearchClick">
                <i class="oi oi-magnifying-glass" title="search" aria-hidden="true"></i>
            </button>
        </div>
        <div class="input-group-btn">
            <button name="OrganizationSearchClear" class="btn btn-default" @onclick="ClearSearch">
                <i class="oi oi-x" title="clear" aria-hidden="true"></i>
            </button>
        </div>
    </div>
</div>

@if (Organizations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <BSTable IsResponsive="true" class='table'>
        <thead class="thead-light">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Type</th>
                <th>Active</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var organization in Organizations.Results)
            {
                <tr>
                    <td>@organization.Id</td>
                    <td>@organization.Name</td>
                    <td>@organization.Type</td>
                    <td>@organization.IsActive</td>
                    <td>
                        <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-eye text-primary" @onclick="@(async () => await ViewOrganization(organization.Id))"></BSButton>
                        @if (isLoggedOn())
                        {
                            <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-pencil text-warning" @onclick="@(async () => await UpdateOrganization(organization.Id))"></BSButton>
                            <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-trash text-danger" @onclick="@(async () => await DeleteOrganization(organization.Id))"></BSButton>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </BSTable>
    <Pager Result=@Organizations PageChanged=PagerPageChanged />
}

<div>
    <BSModal @bind-IsOpen="@isAdd" Size="Size.Large" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
        <BSModalHeader @onclick="CloseModal">@modalTitle</BSModalHeader>
        <BSModalBody>
            <div class="col-md-9">
                <EditForm Model="@organization" OnValidSubmit="@CreateOrganization">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="Name" class="control-label">Name</label>
                        <InputText id="Name" class="form-control" @bind-Value="organization.Name" />
                        <ValidationMessage For="@(() => organization.Name)" />
                    </div>
                    <div class="form-group">
                        <label for="Gender" class="control-label">Type</label>
                        <InputSelect id="Gender" class="form-control" @bind-Value="organization.Type">
                            <option value="">-- Select Type --</option>
                            <option value="Healthcare Provider">Healthcare Provider</option>
                            <option value="Hospital Department">Hospital Department</option>
                            <option value="Organizational Team">Organizational Team</option>
                            <option value="Government">Government</option>
                            <option value="Insurance Company">Insurance Company</option>
                            <option value="Educational Institute">Educational Institute</option>
                            <option value="Religous Institution">Religous Institution</option>
                            <option value="Clinical Research Sponsor">Clinical Research Sponsor</option>
                            <option value="Community Group">Community Group</option>
                            <option value="Non-Healthcare Business or Corporation">Non-Healthcare Business or Coporation</option>
                            <option value="Other">Other</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => organization.Type)" />
                    </div>
                    <div class="form-group">
                        <div class="form-check">
                            <InputCheckbox id="Active" class="form-check-input" @bind-Value="organization.IsActive" />
                            <label for="Active" class="form-check-label">Active</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-success">Save</button>
                        <button class="btn btn-primary" @onclick="CloseModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </BSModalBody>
    </BSModal>
</div>

<div>
    <BSModal @bind-IsOpen="isView" Size="Size.Large" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
        <BSModalHeader @onclick="CloseModal">@modalTitle</BSModalHeader>
        <BSModalBody>
            <div class="col-md-9">
                @if (isDelete)
                {
                    <BSAlert Color="Color.Danger">Please review carefully before deleting.</BSAlert>
                }
            <BSTable IsResponsive="true" class="table">
                <tr>
                    <td>Id</td>
                    <td>@organization.Id</td>
                </tr>
                <tr>
                    <td>Name</td>
                    <td>@organization.Name</td>
                </tr>
                <tr>
                    <td>Type</td>
                    <td>@organization.Type</td>
                </tr>
                <tr>
                    <td>Active</td>
                    <td>@organization.IsActive</td>
                </tr>
                <tr>
                    <td>Date Modified</td>
                    <td>@organization.ModifiedDate</td>
                </tr>
            </BSTable>
                <div class="form-group">
                    @if (isDelete)
                    {
                        <button type="button" class="btn btn-danger" @onclick="(async () => await RemoveOrganization())">Delete</button>
                        <button class="btn btn-primary" @onclick="CloseModal">Cancel</button>
                    }
                    @if (!isDelete)
                    {
                        <button class="btn btn-primary" @onclick="CloseModal">Back</button>
                    }
                </div>
            </div>
        </BSModalBody>
    </BSModal>
</div>

@code {
    [Parameter]
    public string Page { get; set; } = "1";
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;

    protected PagedResult<Organization> Organizations;
    protected Organization organization = new Organization();

    protected int CurrentOrganizationId { get; set; }
    protected string modalTitle { get; set; }
    protected bool isAdd { get; set; }
    protected bool isView { get; set; }
    protected bool isDelete { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Organizations = await Http.GetJsonAsync<PagedResult<Organization>>(Storage.GetItem("environment_uri") + "/organization/?name=" + SearchTerm + "&page=" + Page);
    }

    protected bool isLoggedOn()
    {
        return (Storage.GetItem("JWT-Token") != String.Empty && DateTime.Now.Ticks < Convert.ToInt64(Storage.GetItem("JWT-Time-Expire")));
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await SearchClick();
        }
    }

    protected async Task SearchClick()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            Organizations = await Http.GetJsonAsync<PagedResult<Organization>>(Storage.GetItem("environment_uri") + "/organization/?name=" + SearchTerm + "&page=1");
            return;
        }

        Organizations = await Http.GetJsonAsync<PagedResult<Organization>>(Storage.GetItem("environment_uri") + "/organization/?name=" + SearchTerm + "&page=1");
        StateHasChanged();
    }

    protected async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        Organizations = await Http.GetJsonAsync<PagedResult<Organization>>(Storage.GetItem("environment_uri") + "/organization/?page=1");
        StateHasChanged();
    }

    protected void PagerPageChanged(int page)
    {
        UriHelper.NavigateTo("/organization/list/" + page);
    }

    protected void AddOrganization()
    {
        this.isAdd = true;
        this.modalTitle = "Create Organization";
    }

    protected async Task UpdateOrganization(int OrganizationId)
    {
        organization = await Http.GetJsonAsync<Organization>(Storage.GetItem("environment_uri") + "/organization/" + Convert.ToInt32(OrganizationId));
        CurrentOrganizationId = OrganizationId;
        this.isAdd = true;
        this.modalTitle = "Edit Organization";
    }

    protected async Task ViewOrganization(int OrganizationId)
    {
        organization = await Http.GetJsonAsync<Organization>(Storage.GetItem("environment_uri") + "/organization/" + Convert.ToInt32(OrganizationId));
        CurrentOrganizationId = OrganizationId;
        this.isView = true;
        this.modalTitle = "View Organization";
    }

    protected async Task DeleteOrganization(int OrganizationId)
    {
        organization = await Http.GetJsonAsync<Organization>(Storage.GetItem("environment_uri") + "/organization/" + Convert.ToInt32(OrganizationId));
        CurrentOrganizationId = OrganizationId;
        this.isView = true;
        this.isDelete = true;
        this.modalTitle = "Delete Organization";
    }

    protected async Task CreateOrganization()
    {
        var token = Storage["JWT-Token"];
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        if (CurrentOrganizationId == 0)
        {
            await Http.SendJsonAsync(HttpMethod.Post, Storage.GetItem("environment_uri") + "/organization", organization);
        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, Storage.GetItem("environment_uri") + "/organization/" + Convert.ToInt32(CurrentOrganizationId), organization);
        }
        CloseModal();
        Storage.SetItem("Transaction", "modified");
        await OnParametersSetAsync();
    }

    protected async Task RemoveOrganization()
    {
        var token = Storage["JWT-Token"];
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.DeleteAsync(Storage.GetItem("environment_uri") + "/organization/" + Convert.ToInt32(CurrentOrganizationId));
        CloseModal();
        Storage.SetItem("Transaction", "modified");
        await OnParametersSetAsync();
    }

    protected void CloseModal()
    {
        organization = new Organization();
        CurrentOrganizationId = 0;
        this.isAdd = false;
        this.isView = false;
        this.isDelete = false;
        StateHasChanged();
    }
}
